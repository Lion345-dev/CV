import streamlit as st

# ---- Configuraci√≥n de la P√°gina ----------
st.set_page_config(page_title="Curriculum Vitae", layout="wide")

from datetime import datetime
from google.api_core import retry
from dotenv import load_dotenv
from generate_word import generate_cv  # Importar la funci√≥n para generar el CV
import os
import google.generativeai as genai
import tempfile

# --- Barra Lateral del Comienzo 
st.image("Header.jpg", use_container_width=True)

#### --- Funci√≥n para calcular la edad #####
anio_nacimiento = datetime(2002, 6, 29)

def calcular_edad(anio_nacimiento):
    fecha_actual = datetime.now()
    edad = fecha_actual.year - anio_nacimiento.year
    
    # Ajustar la edad si a√∫n no ha llegado el mes de cumplea√±os
    if fecha_actual.month < anio_nacimiento.month:
        edad -= 1
    elif fecha_actual.month == anio_nacimiento.month and fecha_actual.day < anio_nacimiento.day:
        edad -= 1
        
    return edad

edad = calcular_edad(anio_nacimiento)

# Configuraci√≥n de la API de Gemini con manejo de errores
@st.cache_data
def configure_genai():
    try:
        # Check if running on Streamlit Cloud or locally
        if 'GOOGLE_API_KEY' in st.secrets:
            GOOGLE_API_KEY = st.secrets['GOOGLE_API_KEY']
        else:
            # Fallback for local development
            load_dotenv()
            GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
        
        if not GOOGLE_API_KEY:
            raise ValueError("API key not found in secrets or environment variables")
            
        genai.configure(api_key=GOOGLE_API_KEY)
        return True
    except Exception as e:
        st.error(f"Error configurando API: {str(e)}")
        return False

################

# Funci√≥n para traducir texto con manejo de errores y cach√©
@st.cache_data
def traducir_texto(texto, idioma_destino):
    try:
        if not configure_genai():
            return texto
        
        prompt = f"""
        Traduce el siguiente contenido al {idioma_destino}.
        Importante:
        - NO incluyas marcadores de c√≥digo como ``` o markdown
        - Mant√©n los emojis (üìû, üéØ, üí´, etc.)
        - Preserva los enlaces y URLs tal cual
        - Mant√©n el formato de listas con - o *
        - Conserva los t√≠tulos con # y ##
        - No modifiques fechas ni n√∫meros
        - Mant√©n los nombres propios sin cambios

        Contenido a traducir:
        {texto}
        """
        
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.warning(f"Error en traducci√≥n, mostrando texto original: {str(e)}")
        return texto

# Navigation bar 
# Diccionario para traducir los textos de la barra lateral
sidebar_texts = {
    "title": {
        "Espa√±ol": "Curriculum Vitae",
        "English": "Curriculum Vitae",
        "Fran√ßais": "Curriculum Vitae",
        "Portugu√™s": "Curr√≠culo",
        "Deutsch": "Lebenslauf"
    },
    "header": {
        "Espa√±ol": "Lic. Luis Yael Carmona Guti√©rrez",
        "English": "Lic. Luis Yael Carmona Guti√©rrez",
        "Fran√ßais": "Lic. Luis Yael Carmona Guti√©rrez",
        "Portugu√™s": "Lic. Luis Yael Carmona Guti√©rrez",
        "Deutsch": "Lic. Luis Yael Carmona Guti√©rrez"
    },
    "age": {
        "Espa√±ol": f"Edad: {edad} a√±os",
        "English": f"Age: {edad} years",
        "Fran√ßais": f"√Çge: {edad} ans",
        "Portugu√™s": f"Idade: {edad} anos",
        "Deutsch": f"Alter: {edad} Jahre"
    },
    "sections": {
        "Espa√±ol": "Secciones",
        "English": "Sections",
        "Fran√ßais": "Sections",
        "Portugu√™s": "Se√ß√µes",
        "Deutsch": "Abschnitte"
    }
}

# Update the language selector to include more options
idioma = st.sidebar.selectbox(
    "Language / Idioma", 
    ["Espa√±ol", "English", "Fran√ßais", "Portugu√™s", "Deutsch"]
)

# Actualizar la barra lateral seg√∫n el idioma seleccionado
st.sidebar.title(sidebar_texts["title"][idioma])
st.sidebar.header(sidebar_texts["header"][idioma])
st.sidebar.image("Foto.jpg", width=200)
st.sidebar.subheader(sidebar_texts["age"][idioma])

# Funci√≥n para cargar y traducir markdown
def cargar_markdown(archivo):
    try:
        with open(archivo, "r", encoding="utf-8") as f:
            contenido = f.read()
            if idioma != "Espa√±ol":
                translated_text = traducir_texto(contenido, idioma)
                # Remove markdown comment if present
                if translated_text.startswith("```markdown"):
                    translated_text = translated_text.split("\n", 2)[2]
                if translated_text.endswith("```"):
                    translated_text = translated_text[:-3]
                return translated_text.strip()
            return contenido
    except FileNotFoundError:
        return f"Error: No se encontr√≥ el archivo {archivo}"

# --- Navegaci√≥n  del App 

# Dictionary for section titles in all languages
section_titles = {
    "Perfil Profesional": {
        "Espa√±ol": "Datos de Contacto",
        "English": "Contact Information",
        "Fran√ßais": "Informations de Contact",
        "Portugu√™s": "Informa√ß√µes de Contato",
        "Deutsch": "Kontaktinformationen"
    },
    "Experiencia Profesional": {
        "Espa√±ol": "Experiencia Profesional",
        "English": "Professional Experience",
        "Fran√ßais": "Exp√©rience Professionnelle",
        "Portugu√™s": "Experi√™ncia Profissional",
        "Deutsch": "Berufserfahrung"
    },
    "Experiencia Acad√©mica": {
        "Espa√±ol": "Experiencia Acad√©mica",
        "English": "Academic Experience",
        "Fran√ßais": "Exp√©rience Acad√©mique",
        "Portugu√™s": "Experi√™ncia Acad√™mica",
        "Deutsch": "Akademische Erfahrung"
    },
    "Informaci√≥n Adicional": {  # Nueva secci√≥n
        "Espa√±ol": "Informaci√≥n Adicional",
        "English": "Additional Information",
        "Fran√ßais": "Informations Suppl√©mentaires",
        "Portugu√™s": "Informa√ß√µes Adicionais",
        "Deutsch": "Zus√§tzliche Informationen"
    },
    "Idiomas": {
        "Espa√±ol": "Idiomas",
        "English": "Languages",
        "Fran√ßais": "Langues",
        "Portugu√™s": "Idiomas",
        "Deutsch": "Sprachen"
    }
}

# Dictionary for markdown file paths
section_files = {
    "Perfil Profesional": "markdown/perfil_profesional.md",
    "Experiencia Profesional": "markdown/experiencia_profesional.md",
    "Experiencia Acad√©mica": "markdown/experiencia_academica.md",
    "Informaci√≥n Adicional": "markdown/informacion_adicional.md",  # Nueva secci√≥n
    "Idiomas": "markdown/idiomas.md"
}

# Crear una lista de secciones traducidas seg√∫n el idioma seleccionado
secciones_traducidas = [section_titles[seccion][idioma] for seccion in section_titles]

# Selector de secciones con los t√≠tulos traducidos
seccion_traducida = st.sidebar.radio(sidebar_texts["sections"][idioma], secciones_traducidas)

# Obtener la clave original de la secci√≥n seleccionada
seccion = next(key for key, value in section_titles.items() if value[idioma] == seccion_traducida)

# Mostrar el encabezado de la secci√≥n seleccionada
st.header(section_titles[seccion][idioma])

if seccion == "Idiomas":
    # Mostrar contenido alternativo directamente en el c√≥digo
    st.markdown("### Espa√±ol: Nativo")
    st.progress(100)  # Espa√±ol: Nativo

    st.markdown("### Ingl√©s: Avanzado (C1)")
    st.progress(70)  # Ingl√©s: Avanzado (C1)

    st.markdown("### Franc√©s: Intermedio (B1)")
    st.progress(50)  # Franc√©s: Intermedio (B1)

    st.markdown("### Alem√°n: B√°sico (A2)")
    st.progress(30)  # Alem√°n: B√°sico (A2)
else:
    # Cargar y mostrar el contenido del archivo Markdown para otras secciones
    contenido = cargar_markdown(section_files[seccion])
    st.markdown(contenido)

# Diccionario para traducir los textos relacionados con la descarga
download_texts = {
    "download_section": {
        "Espa√±ol": "Descargar Curr√≠culum",
        "English": "Download Resume",
        "Fran√ßais": "T√©l√©charger le CV",
        "Portugu√™s": "Baixar Curr√≠culo",
        "Deutsch": "Lebenslauf herunterladen"
    },
    "generate_word": {
        "Espa√±ol": "Generar Word",
        "English": "Generate Word",
        "Fran√ßais": "G√©n√©rer Word",
        "Portugu√™s": "Gerar Word",
        "Deutsch": "Word generieren"
    },
    "generate_pdf": {
        "Espa√±ol": "Generar PDF",
        "English": "Generate PDF",
        "Fran√ßais": "G√©n√©rer PDF",
        "Portugu√™s": "Gerar PDF",
        "Deutsch": "PDF generieren"
    },
    "word_error": {
        "Espa√±ol": "El archivo Word no se gener√≥ correctamente.",
        "English": "The Word file was not generated correctly.",
        "Fran√ßais": "Le fichier Word n'a pas √©t√© g√©n√©r√© correctement.",
        "Portugu√™s": "O arquivo Word n√£o foi gerado correctamente.",
        "Deutsch": "Die Word-Datei wurde nicht korrekt generiert."
    },
    "pdf_error": {
        "Espa√±ol": "El archivo PDF no se gener√≥ correctamente.",
        "English": "The PDF file was not generated correctly.",
        "Fran√ßais": "Le fichier PDF n'a pas √©t√© g√©n√©r√© correctement.",
        "Portugu√™s": "O arquivo PDF n√£o foi gerado correctamente.",
        "Deutsch": "Die PDF-Datei wurde nicht korrekt generiert."
    }
}

# Funci√≥n para cargar contenido de los archivos Markdown
def cargar_contenido_markdown():
    contenido = {}
    for seccion, archivo in section_files.items():
        try:
            with open(archivo, "r", encoding="utf-8") as f:
                contenido[seccion] = f.read()
        except FileNotFoundError:
            contenido[seccion] = f"Error: No se encontr√≥ el archivo {archivo}"
    return contenido

# Cargar contenido de los archivos Markdown
contenido_markdown = cargar_contenido_markdown()

# Diccionario para mapear nombres de idiomas a c√≥digos
language_codes = {
    "Espa√±ol": "es",
    "English": "en",
    "Fran√ßais": "fr",
    "Portugu√™s": "pt",
    "Deutsch": "de"
}

# Botones para descargar el curr√≠culum en Word y PDF
st.markdown(f"## {download_texts['download_section'][idioma]}")

# Generar y descargar el archivo Word
if st.button(download_texts["generate_word"][idioma]):
    try:
        # Convertir el idioma seleccionado al c√≥digo esperado
        language_code = language_codes.get(idioma, "en")  # Por defecto, ingl√©s

        # Generar el archivo Word usando contenido de Markdown
        with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_file:
            filename_word = generate_cv(contenido_markdown, language=language_code, output_format="docx", output_path=tmp_file.name)
            st.success(download_texts["generate_word"][idioma])
            with open(filename_word, "rb") as file:
                st.download_button(
                    label="üì• Descargar Word",
                    data=file,
                    file_name="curriculum_LYCG.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
    except Exception as e:
        st.error(f"{download_texts['word_error'][idioma]}: {str(e)}")

# Generar y descargar el archivo PDF
if st.button(download_texts["generate_pdf"][idioma]):
    try:
        # Convertir el idioma seleccionado al c√≥digo esperado
        language_code = language_codes.get(idioma, "en")  # Por defecto, ingl√©s

        # Generar el archivo PDF usando contenido de Markdown
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
            filename_pdf = generate_cv(contenido_markdown, language=language_code, output_format="pdf", output_path=tmp_file.name)
            st.success(download_texts["generate_pdf"][idioma])
            with open(filename_pdf, "rb") as file:
                st.download_button(
                    label="üì• Descargar PDF",
                    data=file,
                    file_name="curriculum_LYCG.pdf",
                    mime="application/pdf"
                )
    except Exception as e:
        st.error(f"{download_texts['pdf_error'][idioma]}: {str(e)}")